{"version":3,"sources":["componentes/Socket.js","componentes/Chat/Chat.js","App.js","serviceWorker.js","index.js"],"names":["socket","io","Chat","name","setName","Form","useForm","form","useState","messages","setMessages","useEffect","emit","on","message","off","divRef","useRef","current","scrollIntoView","behavior","className","onBack","title","subTitle","map","e","i","key","ref","layout","onFinish","values","console","log","resetFields","onFinishFailed","errorInfo","Item","rules","required","type","htmlType","App","registrado","setRegistrado","labelCol","span","wrapperCol","initialValues","remember","username","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"2RAIeA,E,MAFFC,GAAG,K,4CCsFDC,EAnFF,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QAAc,EACnBC,IAAKC,UAAbC,EAD2B,sBAEFC,mBAAS,IAFP,mBAE3BC,EAF2B,KAEjBC,EAFiB,KAIlCC,qBAAU,WACRX,EAAOY,KAAK,YAAaT,KACxB,CAACA,IAEJQ,qBAAU,WAKR,OAJAX,EAAOa,GAAG,YAAY,SAACC,GACrBJ,EAAY,GAAD,mBAAKD,GAAL,CAAeK,QAGrB,WACLd,EAAOe,SAER,CAACN,EAAUF,IAEd,IAAMS,EAASC,iBAAO,MACtBN,qBAAU,WACRK,EAAOE,QAAQC,eAAe,CAAEC,SAAU,cAa5C,OACE,yBAAKC,UAAU,WACb,kBAAC,IAAD,CACEA,UAAU,mBACVC,OAAQ,kBAAMlB,EAAQ,KACtBmB,MAAM,YACNC,SAAS,wBAEX,2BAAOH,UAAU,QACdZ,EAASgB,KAAI,SAACC,EAAGC,GAAJ,OACZ,wBAAIC,IAAKD,GACP,4BACGD,EAAEvB,KACF,KAEH,4BAAKuB,EAAEZ,aAGX,yBAAKe,IAAKb,KAEZ,kBAAC,IAAD,CACEb,KAAK,QACL2B,OAAO,SACPT,UAAU,WACVU,SAlCW,SAACC,GAChBC,QAAQC,IAAI,WAAYF,EAAOlB,SAC/Bd,EAAOY,KAAK,UAAWT,EAAM6B,EAAOlB,SACpCP,EAAK4B,eAgCDC,eA7BiB,SAACC,GACtBJ,QAAQC,IAAI,UAAWG,IA6BnB9B,KAAMA,GAEN,kBAAC,IAAK+B,KAAN,CACEnC,KAAK,UACLoC,MAAO,CACL,CACEC,UAAU,EACV1B,QAAS,gCAIb,kBAAC,IAAD,OAEF,kBAAC,IAAD,CAAQ2B,KAAK,SAASC,SAAS,SAA/B,SAGA,kBAAC,IAAD,CAAQD,KAAK,UAAUC,SAAS,UAAhC,W,OCxBOC,MAnDf,WAAgB,IAAD,EACWnC,mBAAS,IADpB,mBACNL,EADM,KACAC,EADA,OAEuBI,oBAAS,GAFhC,mBAENoC,EAFM,KAEMC,EAFN,KAcb,OACE,yBAAKxB,UAAU,QACXuB,GACA,kBAAC,IAAD,CACEzC,KAAK,QACLkB,UAAU,QACVyB,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,IACpBE,cAAe,CAAEC,UAAU,GAC3BnB,SAnBS,SAACC,GAChBC,QAAQC,IAAI,WAAYF,EAAOmB,UAC/B/C,EAAQ4B,EAAO7B,MACf0C,GAAc,IAiBRT,eAde,SAACC,GACtBJ,QAAQC,IAAI,UAAWG,KAejB,qCACA,kBAAC,IAAKC,KAAN,CACEc,MAAM,OACNjD,KAAK,OACLoC,MAAO,CACL,CACEC,UAAU,EACV1B,QAAS,6BAIb,kBAAC,IAAD,OAGF,kBAAC,IAAD,CAAQ2B,KAAK,UAAUC,SAAS,UAAhC,WAMHE,GAAc,kBAAC,EAAD,CAAMzC,KAAMA,EAAMC,QAASA,MCvC5BiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMxD,c","file":"static/js/main.4a22ef0b.chunk.js","sourcesContent":["import io from \"socket.io-client\";\n\nlet socket = io(\"/\");\n\nexport default socket;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport socket from \"../Socket\";\nimport \"./Chat.scss\";\nimport { Form, Input, Button, PageHeader } from \"antd\";\n\nconst Chat = ({ name, setName }) => {\n  const [form] = Form.useForm();\n  const [messages, setMessages] = useState([]);\n\n  useEffect(() => {\n    socket.emit(\"conectado\", name);\n  }, [name]);\n\n  useEffect(() => {\n    socket.on(\"messages\", (message) => {\n      setMessages([...messages, message]);\n    });\n\n    return () => {\n      socket.off();\n    };\n  }, [messages, form]);\n\n  const divRef = useRef(null);\n  useEffect(() => {\n    divRef.current.scrollIntoView({ behavior: \"smooth\" });\n  });\n\n  const onFinish = (values) => {\n    console.log(\"Success:\", values.message);\n    socket.emit(\"message\", name, values.message);\n    form.resetFields();\n  };\n\n  const onFinishFailed = (errorInfo) => {\n    console.log(\"Failed:\", errorInfo);\n  };\n\n  return (\n    <div className=\"divChat\">\n      <PageHeader\n        className=\"site-page-header\"\n        onBack={() => setName(\"\")}\n        title=\"SocialNet\"\n        subTitle=\"This is a fast chat\"\n      />\n      <table className=\"chat\">\n        {messages.map((e, i) => (\n          <tr key={i}>\n            <td>\n              {e.name}\n              {\":\"}\n            </td>\n            <td>{e.message}</td>\n          </tr>\n        ))}\n        <div ref={divRef}></div>\n      </table>\n      <Form\n        name=\"basic\"\n        layout=\"inline\"\n        className=\"formSend\"\n        onFinish={onFinish}\n        onFinishFailed={onFinishFailed}\n        form={form}\n      >\n        <Form.Item\n          name=\"message\"\n          rules={[\n            {\n              required: true,\n              message: \"Please input your message!\",\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n        <Button type=\"dashed\" htmlType=\"reset\">\n          Reset\n        </Button>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Send\n        </Button>\n      </Form>\n    </div>\n  );\n};\n\nexport default Chat;\n","import React, { useState } from \"react\";\nimport Chat from \"./componentes/Chat/Chat\";\nimport \"./App.scss\";\nimport { Form, Input, Button } from \"antd\";\n\nfunction App() {\n  const [name, setName] = useState(\"\");\n  const [registrado, setRegistrado] = useState(false);\n\n  const onFinish = (values) => {\n    console.log(\"Success:\", values.username);\n    setName(values.name);\n    setRegistrado(true);\n  };\n\n  const onFinishFailed = (errorInfo) => {\n    console.log(\"Failed:\", errorInfo);\n  };\n\n  return (\n    <div className=\"App\">\n      {!registrado && (\n        <Form\n          name=\"basic\"\n          className=\"login\"\n          labelCol={{ span: 8 }}\n          wrapperCol={{ span: 16 }}\n          initialValues={{ remember: true }}\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n        >\n          <h1>Login</h1>\n          <Form.Item\n            label=\"Name\"\n            name=\"name\"\n            rules={[\n              {\n                required: true,\n                message: \"Please input your name!\",\n              },\n            ]}\n          >\n            <Input />\n          </Form.Item>\n\n          <Button type=\"primary\" htmlType=\"submit\">\n            Entrar\n          </Button>\n        </Form>\n      )}\n\n      {registrado && <Chat name={name} setName={setName} />}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}