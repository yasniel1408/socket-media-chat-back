{"version":3,"sources":["componentes/Socket.js","componentes/Chat.js","App.js","serviceWorker.js","index.js"],"names":["socket","io","Chat","nombre","useState","mensaje","setMensaje","mensajes","setMensajes","useEffect","emit","on","off","divRef","useRef","current","scrollIntoView","behavior","className","map","e","i","key","ref","onSubmit","preventDefault","required","value","onChange","target","type","App","setNombre","registrado","setRegistrado","htmlFor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4PAIeA,E,MAFFC,GAAG,KCyDDC,G,MAvDF,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAAa,EACGC,mBAAS,IADZ,mBACpBC,EADoB,KACXC,EADW,OAEKF,mBAAS,IAFd,mBAEpBG,EAFoB,KAEVC,EAFU,KAI3BC,qBAAU,WACRT,EAAOU,KAAK,YAAaP,KACxB,CAACA,IAEJM,qBAAU,WAKR,OAJAT,EAAOW,GAAG,YAAY,SAACN,GACrBG,EAAY,GAAD,mBAAKD,GAAL,CAAeF,QAGrB,WACLL,EAAOY,SAER,CAACL,IAEJ,IAAMM,EAASC,iBAAO,MACtBL,qBAAU,WACRI,EAAOE,QAAQC,eAAe,CAAEC,SAAU,cAS5C,OACE,yBAAKC,UAAU,WACb,2BAAOA,UAAU,QACdX,EAASY,KAAI,SAACC,EAAGC,GAAJ,OACZ,wBAAIC,IAAKD,GACP,4BACGD,EAAEjB,OACF,KAEH,4BAAKiB,EAAEf,aAGX,yBAAKkB,IAAKV,KAEZ,0BAAMK,UAAU,WAAWM,SApBhB,SAACJ,GACdA,EAAEK,iBACFzB,EAAOU,KAAK,UAAWP,EAAQE,GAC/BC,EAAW,MAkBP,2BACEoB,UAAQ,EACRC,MAAOtB,EACPuB,SAAU,SAACR,GAAD,OAAOd,EAAWc,EAAES,OAAOF,UAEvC,4BAAQG,KAAK,UAAb,YCrBOC,MA5Bf,WAAgB,IAAD,EACe3B,mBAAS,IADxB,mBACND,EADM,KACE6B,EADF,OAEuB5B,oBAAS,GAFhC,mBAEN6B,EAFM,KAEMC,EAFN,KAWb,OACE,yBAAKhB,UAAU,QACXe,GACA,0BAAMT,SAVM,SAACJ,GACjBA,EAAEK,iBACa,KAAXtB,GACF+B,GAAc,KAQV,2BAAOC,QAAQ,IAAf,wBACA,6BACA,2BAAOR,MAAOxB,EAAQyB,SAAU,SAACR,GAAD,OAAOY,EAAUZ,EAAES,OAAOF,UAC1D,6BACA,+CAIHM,GAAc,kBAAC,EAAD,CAAM9B,OAAQA,MCffiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.579454d3.chunk.js","sourcesContent":["import io from \"socket.io-client\";\n\nlet socket = io(\"/\");\n\nexport default socket;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport socket from \"./Socket\";\nimport \"../App.css\";\n\nconst Chat = ({ nombre }) => {\n  const [mensaje, setMensaje] = useState(\"\");\n  const [mensajes, setMensajes] = useState([]);\n\n  useEffect(() => {\n    socket.emit(\"conectado\", nombre);\n  }, [nombre]);\n\n  useEffect(() => {\n    socket.on(\"mensajes\", (mensaje) => {\n      setMensajes([...mensajes, mensaje]);\n    });\n\n    return () => {\n      socket.off();\n    };\n  }, [mensajes]);\n\n  const divRef = useRef(null);\n  useEffect(() => {\n    divRef.current.scrollIntoView({ behavior: \"smooth\" });\n  });\n\n  const submit = (e) => {\n    e.preventDefault();\n    socket.emit(\"mensaje\", nombre, mensaje);\n    setMensaje(\"\");\n  };\n\n  return (\n    <div className=\"divChat\">\n      <table className=\"chat\">\n        {mensajes.map((e, i) => (\n          <tr key={i}>\n            <td>\n              {e.nombre}\n              {\":\"}\n            </td>\n            <td>{e.mensaje}</td>\n          </tr>\n        ))}\n        <div ref={divRef}></div>\n      </table>\n      <form className=\"formSend\" onSubmit={submit}>\n        <input\n          required\n          value={mensaje}\n          onChange={(e) => setMensaje(e.target.value)}\n        />\n        <button type=\"submit\">Send</button>\n      </form>\n    </div>\n  );\n};\n\nexport default Chat;\n","import React, { useState } from \"react\";\nimport Chat from \"./componentes/Chat\";\nimport \"./App.css\";\n\nfunction App() {\n  const [nombre, setNombre] = useState(\"\");\n  const [registrado, setRegistrado] = useState(false);\n\n  const registrar = (e) => {\n    e.preventDefault();\n    if (nombre !== \"\") {\n      setRegistrado(true);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      {!registrado && (\n        <form onSubmit={registrar}>\n          <label htmlFor=\"\">Introduzca su nombre</label>\n          <br />\n          <input value={nombre} onChange={(e) => setNombre(e.target.value)} />\n          <br />\n          <button>Ir al chat</button>\n        </form>\n      )}\n\n      {registrado && <Chat nombre={nombre} />}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}