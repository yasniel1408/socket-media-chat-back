{"version":3,"sources":["componentes/Socket.js","componentes/Chat.js","App.js","serviceWorker.js","index.js"],"names":["socket","io","Chat","nombre","useState","mensaje","setMensaje","mensajes","setMensajes","useEffect","emit","on","divRef","useRef","current","scrollIntoView","behavior","className","map","e","i","key","ref","onSubmit","preventDefault","htmlFor","name","id","cols","rows","value","onChange","target","App","setNombre","registrado","setRegistrado","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4PAIeA,E,MAFFC,GAAG,KC0DDC,G,MAxDF,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAAa,EACGC,mBAAS,IADZ,mBACpBC,EADoB,KACXC,EADW,OAEKF,mBAAS,IAFd,mBAEpBG,EAFoB,KAEVC,EAFU,KAI3BC,qBAAU,WACRT,EAAOU,KAAK,YAAaP,KACxB,CAACA,IAEJM,qBAAU,WACRT,EAAOW,GAAG,YAAY,SAACN,GACrBG,EAAY,GAAD,mBAAKD,GAAL,CAAeF,UAM3B,CAACE,IAEJ,IAAMK,EAASC,iBAAO,MACtBJ,qBAAU,WACRG,EAAOE,QAAQC,eAAe,CAAEC,SAAU,cAS5C,OACE,6BACE,yBAAKC,UAAU,QACZV,EAASW,KAAI,SAACC,EAAGC,GAAJ,OACZ,yBAAKC,IAAKD,GACR,6BAAMD,EAAEhB,QACR,6BAAMgB,EAAEd,aAGZ,yBAAKiB,IAAKV,KAEZ,0BAAMW,SAjBK,SAACJ,GACdA,EAAEK,iBACFxB,EAAOU,KAAK,UAAWP,EAAQE,GAC/BC,EAAW,MAeP,2BAAOmB,QAAQ,IAAf,sBACA,8BACEC,KAAK,GACLC,GAAG,GACHC,KAAK,KACLC,KAAK,KACLC,MAAOzB,EACP0B,SAAU,SAACZ,GAAD,OAAOb,EAAWa,EAAEa,OAAOF,UAEvC,8CCxBOG,MA1Bf,WAAgB,IAAD,EACe7B,mBAAS,IADxB,mBACND,EADM,KACE+B,EADF,OAEuB9B,oBAAS,GAFhC,mBAEN+B,EAFM,KAEMC,EAFN,KAWb,OACE,yBAAKnB,UAAU,QACXkB,GACA,0BAAMZ,SAVM,SAACJ,GACjBA,EAAEK,iBACa,KAAXrB,GACFiC,GAAc,KAQV,2BAAOX,QAAQ,IAAf,wBACA,2BAAOK,MAAO3B,EAAQ4B,SAAU,SAACZ,GAAD,OAAOe,EAAUf,EAAEa,OAAOF,UAC1D,+CAIHK,GAAc,kBAAC,EAAD,CAAMhC,OAAQA,MCbfkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e11811e7.chunk.js","sourcesContent":["import io from \"socket.io-client\";\r\n\r\nlet socket = io(\"/\");\r\n\r\nexport default socket;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport socket from \"./Socket\";\r\nimport \"../App.css\";\r\n\r\nconst Chat = ({ nombre }) => {\r\n  const [mensaje, setMensaje] = useState(\"\");\r\n  const [mensajes, setMensajes] = useState([]);\r\n\r\n  useEffect(() => {\r\n    socket.emit(\"conectado\", nombre);\r\n  }, [nombre]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"mensajes\", (mensaje) => {\r\n      setMensajes([...mensajes, mensaje]);\r\n    });\r\n\r\n    // return () => {\r\n    //   socket.off();\r\n    // };\r\n  }, [mensajes]);\r\n\r\n  const divRef = useRef(null);\r\n  useEffect(() => {\r\n    divRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n  });\r\n\r\n  const submit = (e) => {\r\n    e.preventDefault();\r\n    socket.emit(\"mensaje\", nombre, mensaje);\r\n    setMensaje(\"\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"chat\">\r\n        {mensajes.map((e, i) => (\r\n          <div key={i}>\r\n            <div>{e.nombre}</div>\r\n            <div>{e.mensaje}</div>\r\n          </div>\r\n        ))}\r\n        <div ref={divRef}></div>\r\n      </div>\r\n      <form onSubmit={submit}>\r\n        <label htmlFor=\"\">Escriba su mensaje</label>\r\n        <textarea\r\n          name=\"\"\r\n          id=\"\"\r\n          cols=\"30\"\r\n          rows=\"10\"\r\n          value={mensaje}\r\n          onChange={(e) => setMensaje(e.target.value)}\r\n        ></textarea>\r\n        <button>Enviar</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n","import React, { useState } from \"react\";\r\nimport Chat from \"./componentes/Chat\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [nombre, setNombre] = useState(\"\");\r\n  const [registrado, setRegistrado] = useState(false);\r\n\r\n  const registrar = (e) => {\r\n    e.preventDefault();\r\n    if (nombre !== \"\") {\r\n      setRegistrado(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {!registrado && (\r\n        <form onSubmit={registrar}>\r\n          <label htmlFor=\"\">Introduzca su nombre</label>\r\n          <input value={nombre} onChange={(e) => setNombre(e.target.value)} />\r\n          <button>Ir al chat</button>\r\n        </form>\r\n      )}\r\n\r\n      {registrado && <Chat nombre={nombre} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}